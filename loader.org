#+TITLE: My GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction

This is my version of an configuration file for GNU Emacs.

* A secure Emacs environment

Great article why [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is malware]]. The following basically sets
up the configuration to adhere to the articles recommendations.

#+BEGIN_SRC shell :exports none
python -m pip install --user certifi
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
  (setq tls-checktrust t)

  (setq python (or (executable-find "py.exe")
                   (executable-find "python")
                   ))

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; Test the settings by using the following code snippet:
  ;;  (let ((bad-hosts
  ;;         (loop for bad
  ;;               in `("https://wrong.host.badssl.com/"
  ;;                    "https://self-signed.badssl.com/")
  ;;               if (condition-case e
  ;;                      (url-retrieve
  ;;                       bad (lambda (retrieved) t))
  ;;                    (error nil))
  ;;               collect bad)))
  ;;    (if bad-hosts
  ;;        (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
  ;;      (url-retrieve "https://badssl.com"
  ;;                    (lambda (retrieved) t))))
#+END_SRC

* Installing use-package
** Setup

GNU Emacs has a lot of packages that make things very easy for the
user. The package management infrastructure makes it a breeze to
install new packages and keep up-to-date with their development.

There are several package archives available for GNU Emacs:

- GNU
- Marmalade
- Melpa

Each archive will write its files in a separate archive directory.

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Because the default setting for package-archives is to use the HTTP
access to the GNU archive, I set the variable to `nil` before adding
the HTTPS variants.

#+name: credmp-package-infrastructure
#+begin_src emacs-lisp
  ;; Modern linux installations will fail with TLS erros if 1.3 is not a priority
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (defvar org-elpa '("org" . "https://orgmode.org/elpa/"))

  ;; Add marmalade to package repos
  (setq package-archives nil)
  (add-to-list 'package-archives melpa-stable t)
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives gnu t)
  (add-to-list 'package-archives org-elpa t)
#+end_src

Initialize the archive and refresh the contents in case there is no
cached archive.

#+BEGIN_SRC emacs-lisp
  (when (< emacs-major-version 27)
    (package-initialize))

  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa"))
               (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))
#+END_SRC

At each load the package list will be evaluated and any missing
packages will be installed. The packages-install function deals with
this check and takes care of any loading of the packages.

#+name: credmp-package-installer
#+begin_src emacs-lisp
  (defun packages-install (&rest packages)
    (message "running packages-install")
    (mapc (lambda (package)
            (let ((name (car package))
                  (repo (cdr package)))
              (when (not (package-installed-p name))
                (let ((package-archives (list repo)))
                  (when (< emacs-major-version 27)
                    (package-initialize))
                  (package-install name)))))
          packages)
    (when (< emacs-major-version 27)
      (package-initialize))
    (delete-other-windows))
#+end_src

** The package

#+name: credmp-package-installer
#+begin_src emacs-lisp
  ;; Install extensions if they're missing
  (defun init--install-packages ()
    (message "Lets install some packages")
    (packages-install
     ;; Since use-package this is the only entry here
     ;; ALWAYS try to use use-package!
     (cons 'use-package melpa)
     ))

  (condition-case nil
      (init--install-packages)
    (error
     (package-refresh-contents)
     (init--install-packages)))
#+end_src
** Configure use-package

#+begin_src emacs-lisp
  ;; Always install packages
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

** Configure use-package

#+BEGIN_SRC emacs-lisp
  ;; Always install packages
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
** Diminish modes

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* Moving around

Be sure to just ask for y/n instead of yes/no.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


Bookmarks are very useful for quickly jumping around files.

#+BEGIN_SRC emacs-lisp
  (use-package bm
    :demand t

    :init
    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)


    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers t)

    ;; where to store persistant files
    (setq bm-repository-file (concat user-emacs-directory "/bm-repository"))

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook 'after-init-hook 'bm-repository-load)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)


    :bind (("<f2>" . bm-next)
           ("S-<f2>" . bm-previous)
           ("C-<f2>" . bm-toggle))
    )
#+END_SRC

Use the counsel and swiper packages to make the use of M-x and search
a lot easier.

#+BEGIN_SRC emacs-lisp
  (use-package smex)

  (use-package counsel
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package swiper
    :pin melpa-stable
    :diminish ivy-mode

    :bind*
    (("C-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("C-x C-f" . counsel-find-file)
     ("C-c h f" . counsel-describe-function)
     ("C-c h v" . counsel-describe-variable)
     ("C-c i u" . counsel-unicode-char)
     ("M-i" . counsel-imenu)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c k" . counsel-ag)
     ;;      ("C-c l" . scounsel-locate)
     )
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (define-key read-expression-map (kbd "C-r") #'counsel-expression-history)
      (ivy-set-actions
       'counsel-find-file
       '(("d" (lambda (x) (delete-file (expand-file-name x)))
          "delete"
          )))
      (ivy-set-actions
       'ivy-switch-buffer
       '(("k"
          (lambda (x)
            (kill-buffer x)
            (ivy--reset-state ivy-last))
          "kill")
         ("j"
          ivy--switch-buffer-other-window-action
          "other window")))))

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))

  (use-package ivy-hydra )
#+END_SRC

From [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmatic Emacs]] a more concise way to kill the buffer.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+end_src

Mouse wheel scrolling can be quite annoying, lets fix it to scroll
smoothly.

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+end_src

* Discover-ability

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

#+begin_src emacs-lisp
  (use-package projectile
    :bind (("C-c p f" . projectile-find-file)
           ("C-c p p" . projectile-switch-project)
           ("C-c p t" . projectile-find-test-file))
    :config
    (setq projectile-enable-caching t)
    (add-hook 'prog-mode-hook 'projectile-mode))
#+end_src
* Environment

#+begin_src emacs-lisp
;;  (custom-set-variables '(epg-gpg-program  "/usr/local/MacGPG2/bin/gpg2"))
#+end_src

** GUI

- Turn off mouse interface early in startup to avoid momentary display.

#+name: credmp-gui
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

- Move to trash when deleting stuff and write backup files to own directory

#+name: credmp-trash
#+begin_src emacs-lisp
  ;; Backup settings
  (defvar --backup-directory (concat init-dir "backups"))

  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))

  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )
    (setq delete-by-moving-to-trash t
          trash-directory "~/.Trash/emacs")

    (setq backup-directory-alist `(("." . ,(expand-file-name
                                            (concat init-dir "backups")))))
#+end_src

- Don't open files from the workspace in a new frame

#+name: credmp-trash
#+begin_src emacs-lisp
  (setq ns-pop-up-frames nil)
#+end_src

[[https://www.emacswiki.org/emacs/InteractiveSpell][Spellchecking in Emacs]].

Install using apt:

#+BEGIN_SRC shell :exports none
  apt install hunspell
#+END_SRC

# Install dictionaries from the [[https://addons.mozilla.org/en-us/firefox/language-tools/][Mozilla Add-on page]]. On Linux these will be available in your package manager as ~hunspell-nl~.

# #+name: credmp-spell
# #+begin_src emacs-lisp
#     (defun spell-buffer-dutch ()
#       (interactive)
#       (ispell-change-dictionary "nederlands")
#       (flyspell-buffer))

#     (defun spell-buffer-english ()
#       (interactive)
#       (ispell-change-dictionary "en_US")
#       (flyspell-buffer))

#     (use-package ispell
#       :config
#       (when (executable-find "hunspell")
#         (setq-default ispell-program-name "hunspell")
#         (setq ispell-really-hunspell t))

#       ;; (setq ispell-program-name "aspell"
#       ;;       ispell-extra-args '("--sug-mode=ultra"))
#       :bind (("C-c N" . spell-buffer-dutch)
#              ("C-c e" . spell-buffer-english)))
# #+end_src

- Find out what face is used, so you can customize it :)

#+name: credmp-spell
#+begin_src emacs-lisp
  ;;; what-face to determine the face at the current point
  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+end_src

- Windows management

#+name: credmp-window
#+begin_src emacs-lisp
  (use-package ace-window
    :config
    (global-set-key (kbd "C-x o") 'ace-window))

  (use-package ace-jump-mode
    :config
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+end_src

- Misc stuff

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  ;;(global-linum-mode)
  ;;(global-hl-line-mode nil)

  (custom-set-faces
   '(line-number-current-line ((t (:inherit default :background "#282635")))))

  (setq-default indent-tabs-mode nil)

  (defun iwb ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (global-set-key (kbd "C-c n") 'iwb)

  (electric-pair-mode t)
#+end_src

* Look and feel

#+name: credmp-package-installer
#+begin_src emacs-lisp
  (when (window-system)
    (use-package modus-operandi-theme)
    (use-package modus-vivendi-theme)

    (use-package theme-changer)

    (setq calendar-location-name "Ljubljana, Slovenia") 
    (setq calendar-latitude 46.12)
    (setq calendar-longitude 14.47)

    (change-theme 'modus-operandi 'modus-vivendi)
  
    ;; (use-package doom-themes

    ;;   :config
    ;;   ;; Global settings (defaults)
    ;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    ;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;;   ;; load theme here
    ;;   (load-theme 'doom-one t)
    ;;   ;; Enable flashing mode-line on errors
    ;;   (doom-themes-visual-bell-config)

    ;;   ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;   ;;(doom-themes-neotree-config)
    ;;   ;; or for treemacs users
    ;;   (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    ;;   (doom-themes-treemacs-config)

    ;;   ;; Corrects (and improves) org-mode's native fontification.
    ;;   (doom-themes-org-config))

    (set-face-attribute 'default nil :font "Hack-14")
    )
#+end_src

#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode)

  (defun live-coding ()
    (interactive)
    (set-face-attribute 'default nil :font "Hack-18")
    (add-hook 'prog-mode-hook 'command-log-mode)
    ;;(add-hook 'prog-mode-hook (lambda () (focus-mode 1)))
    )

  (defun normal-coding ()
    (interactive)
    (set-face-attribute 'default nil :font "Hack-14")
    (add-hook 'prog-mode-hook 'command-log-mode)
    ;;(add-hook 'prog-mode-hook (lambda () (focus-mode 1)))
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
   (eval-after-load "org-indent" '(diminish 'org-indent-mode))
#+END_SRC

Now, lets make sure we are not `ding`-ed all the time.

#+BEGIN_SRC emacs-lisp
  ;; http://stackoverflow.com/questions/11679700/emacs-disable-beep-when-trying-to-move-beyond-the-end-of-the-document
  (defun my-bell-function ())

  (setq ring-bell-function 'my-bell-function)
  (setq visible-bell nil)
#+END_SRC

* Writing
** Grammar checking

# I want to write decent English and Dutch. To that end I do not only need a decent spell checker but also a grammar checker. [[https://languagetool.org/][LanguageTool]] provides a language independent mechanism to check grammar. Get the desktop (offline) version from the website.

# #+begin_src
# wget https://languagetool.org/download/LanguageTool-4.8.zip
# unzip LanguageTool-4.8.zip
# #+end_src

# Then include the ~langtool~ package. This process checks every word in the buffer and does not consider things like code blocks, so only use on actual text files or perhaps narrow the region?

# #+begin_src emacs-lisp
#   (use-package langtool
#     :config (setq langtool-language-tool-server-jar (concat user-emacs-directory "/LanguageTool-4.8/languagetool-server.jar"))
#     :bind (("\C-x4w" . langtool-check)
#            ("\C-x4W" . langtool-check-done)
#            ("\C-x4l" . langtool-switch-default-language)
#            ("\C-x44" . langtool-show-message-at-point)
#            ("\C-x4c" . langtool-correct-buffer)))
# #+end_src
** Word wrapping

Please wrap text around when in text-modes. Also enable flyspell to catch nasty writing errors.

#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda ()
                     (flyspell-mode 1)
                     (visual-line-mode 1)
                     )))
#+END_SRC

** Markdown support

Markdown is a great way to write documentation, not as good as org-mode of course, but generally accepted as a standard.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC

** HTMLize buffers

When exporting documents to HTML documents, such as code fragments, we need to htmlize.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

** Undo

The ~undo-tree~ package allows you to go through all your edits in the
undo tree.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-visualizer-timestamps t))
#+END_SRC

** Selection

#+begin_src emacs-lisp
  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

* Programming

** General programming
*** Tabs vs Spaces

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Indent guides

Have a helpful line indicate what indentation block we are on.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook ((prog-mode text-mode conf-mode) . highlight-indent-guides-mode)
    :init
    (setq highlight-indent-guides-method 'character)
    :config
    (add-hook 'focus-in-hook #'highlight-indent-guides-auto-set-faces)
    ;; `highlight-indent-guides' breaks in these modes
    (add-hook 'org-indent-mode-hook
      (defun +indent-guides-disable-maybe-h ()
        (when highlight-indent-guides-mode
          (highlight-indent-guides-mode -1)))))
#+end_src

*** Utilities

String manipulation routines for emacs lisp

#+BEGIN_SRC emacs-lisp
  (use-package s)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

*** Code Folding

#+BEGIN_SRC emacs-lisp
  (use-package hideshow
    :bind (("C->" . my-toggle-hideshow-all)
           ("C-<" . hs-hide-level)
           ("C-;" . hs-toggle-hiding))
    :config
    ;; Hide the comments too when you do a 'hs-hide-all'
    (setq hs-hide-comments nil)
    ;; Set whether isearch opens folded comments, code, or both
    ;; where x is code, comments, t (both), or nil (neither)
    (setq hs-isearch-open t)
    ;; Add more here

    (setq hs-set-up-overlay
          (defun my-display-code-line-counts (ov)
            (when (eq 'code (overlay-get ov 'hs))
              (overlay-put ov 'display
                           (propertize
                            (format " ... <%d> "
                                    (count-lines (overlay-start ov)
                                                 (overlay-end ov)))
                            'face 'font-lock-type-face)))))

    (defvar my-hs-hide nil "Current state of hideshow for toggling all.")
         ;;;###autoload
    (defun my-toggle-hideshow-all () "Toggle hideshow all."
           (interactive)
           (setq my-hs-hide (not my-hs-hide))
           (if my-hs-hide
               (hs-hide-all)
             (hs-show-all)))

    (add-hook 'prog-mode-hook (lambda ()
                                (hs-minor-mode 1)
                                )))
#+END_SRC

*** Look and feel

Enable the prettify symbols mode. It will translate (fn) to the lambda
sign.

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC

*** LISP Editing

#+name: credmp-lisp-editing
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :diminish paredit-mode
    :config
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    :bind (("C-c d" . paredit-forward-down))
    )

  ;; Ensure paredit is used EVERYWHERE!
  (use-package paredit-everywhere
    :diminish paredit-everywhere-mode
    :config
    (add-hook 'list-mode-hook #'paredit-everywhere-mode))

  (use-package highlight-parentheses
    :diminish highlight-parentheses-mode
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda()
                (highlight-parentheses-mode)
                )))

  (use-package rainbow-delimiters
    :config
    (add-hook 'lisp-mode-hook
              (lambda()
                (rainbow-delimiters-mode)
                )))

  (global-highlight-parentheses-mode)
#+END_SRC

*** Auto completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind (("C-c /". company-complete))
    :config
    (global-company-mode)
    )
#+END_SRC

*** Version Control
Magit is the only thing you need when it comes to Version Control (Git)

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-c m" . magit-status)))

  (use-package magit-gitflow
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

  (use-package forge)

  (use-package git-timemachine)

  ;; https://github.com/alphapapa/unpackaged.el#smerge-mode
  ;; Tipped by Mike Z.
  (use-package smerge-mode
    :after hydra
    :config
    (defhydra unpackaged/smerge-hydra
      (:color pink :hint nil :post (smerge-auto-leave))
      "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("ZZ" (lambda ()
              (interactive)
              (save-buffer)
              (bury-buffer))
       "Save and bury buffer" :color blue)
      ("q" nil "cancel" :color blue))
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (unpackaged/smerge-hydra/body)))))
#+END_SRC

Display the buffer state in the fringe.

#+begin_src emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode +1))
#+end_src

*** REST support

#+BEGIN_SRC emacs-lisp
  (use-package restclient)
#+END_SRC

#+begin_src emacs-lisp
    (use-package ob-restclient
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((restclient . t)
         (shell . t))))
#+end_src

*** Highlight keywords

#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

*** Web editing

The web-mode is particularly good for editing HTML and Javascript files.

#+name: credmp-package-web
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.xhtml?\\'" . web-mode))

    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-markup-indent-offset 2))

    (add-hook 'web-mode-hook  'my-web-mode-hook))

  (use-package less-css-mode)

  (use-package emmet-mode
    :config
    (add-hook 'clojure-mode-hook 'emmet-mode)
    (add-hook 'html-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode))
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package racer
    :config
    (add-hook 'racer-mode-hook #'company-mode)
    (setq company-tooltip-align-annotations t)
    (setq racer-rust-src-path "/home/arjen/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))

  (use-package rust-mode
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (setq rust-format-on-save t))

  (use-package cargo
    :config
    (setq compilation-scroll-output t)
    (add-hook 'rust-mode-hook 'cargo-minor-mode))

  (use-package flycheck-rust
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
    (add-hook 'rust-mode-hook 'flycheck-mode))
#+end_src

** Go

Go code helpers. [[https://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/][see also]]

#+begin_src shell :tangle no
go get -u github.com/nsf/gocode
go get -u github.com/rogpeppe/godef
go get -u golang.org/x/tools/cmd/guru
go get -u golang.org/x/tools/cmd/goimports
#+end_src

Completion
#+begin_src emacs-lisp
  (use-package company-go
    :config
    (setq company-tooltip-limit 20)                      ; bigger popup window
    (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
    (setq company-echo-delay 0)                          ; remove annoying blinking
    (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
    (add-hook 'go-mode-hook (lambda ()
                              (set (make-local-variable 'company-backends) '(company-go))
                              (company-mode))))
#+end_src

Go uses tabs, so lets set the indent to a sane mode

#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src

Packages that you need for a nice Go setup

#+begin_src emacs-lisp
  (use-package go-mode
    :bind (("C-c t t" . go-test-current-test)
           ("C-c t p" . go-test-current-project)
           ("C-c t c" . go-test-current-coverage)
           ("C-c t f" . go-test-current-file))
    :config
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save))

  (use-package go-guru)

  (use-package go-errcheck)

  ;; Yasnippets
  (use-package go-snippets)

  ;; eldoc integration
  (use-package go-eldoc)

  ;; (use-package gocode
  ;;   )

  ;; (use-package godef
  ;;   )

  (use-package gotest)

  (use-package flycheck-golangci-lint
    :hook (go-mode . flycheck-golangci-lint-setup))
#+end_src

** Typescript

Install the typescript package.

#+begin_src emacs-lisp
  (use-package typescript-mode)
#+end_src

#+begin_src
npm i -g typescript-language-server; npm i -g typescript
#+end_src

* Docker

#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src

* Experiments

The following are snippets, functions or other temporary code that I have found or created but that do not have a solid place in my workflow yet.


#+BEGIN_SRC emacs-lisp
  ;; helper functions
  (defun nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))

  (setq mac-right-alternate-modifier nil)

  ;; Customize EWW for dark background
  (setq shr-color-visible-luminance-min 80)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package html-to-hiccup

    :config
    ;;(define-key clojure-mode-map (kbd "H-h") 'html-to-hiccup-convert-region)
    )
#+END_SRC

;; Experiments

#+begin_src emacs-lisp
  (defun fc-insert-date (prefix)
    "Insert the current date. With prefix-argument, use ISO format. With
  two prefix arguments, write out the day and month name."
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "%Y-%m-%dT%H:%M:%S %Z")
                   ((equal prefix '(4)) "%d.%m.%Y")
                   (t "%A, %d. %B %Y")))
          (system-time-locale "nl_NL"))
      (insert (format-time-string format))))
#+end_src

#+begin_src emacs-lisp
   (use-package counsel-projectile
     :config
     (counsel-projectile-mode +1))

   ;; (use-package ivy
   ;;   :diminish
   ;;   :hook (after-init . ivy-mode)
   ;;   :custom
   ;;   (ivy-display-style nil)
   ;;   (ivy-re-builders-alist '((counsel-rg . ivy--regex-plus)
   ;;                            (counsel-projectile-rg . ivy--regex-plus)
   ;;                            (counsel-ag . ivy--regex-plus)
   ;;                            (counsel-projectile-ag . ivy--regex-plus)
   ;;                            (swiper . ivy--regex-plus)
   ;;                            (t . ivy--regex-fuzzy)))
   ;;   (ivy-use-virtual-buffers t)
   ;;   (ivy-count-format "(%d/%d) ")
   ;;   (ivy-initial-inputs-alist nil)
   ;;   :config
   ;;   (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
   ;;   (define-key ivy-minibuffer-map (kbd "<escape>") #'minibuffer-keyboard-quit))

   ;; (use-package swiper
   ;;   :after ivy
   ;;   ;; :custom-face (swiper-line-face ((t (:foreground "#ffffff" :background "#60648E"))))
   ;;   :custom
   ;;   (swiper-action-recenter t)
   ;;   (swiper-goto-start-of-match t))

  ;; (use-package ivy-posframe
  ;;    :after ivy
  ;;    :diminish
  ;;    :custom
  ;;    (ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
  ;;    (ivy-posframe-height-alist '((t . 20)))
  ;;    (ivy-posframe-parameters '((internal-border-width . 10)))
  ;;    (ivy-posframe-width 70)
  ;;    :config
  ;;    (ivy-posframe-mode +1))

   ;; (use-package ivy-rich
   ;;   :preface
   ;;   (defun ivy-rich-switch-buffer-icon (candidate)
   ;;     (with-current-buffer
   ;;         (get-buffer candidate)
   ;;       (all-the-icons-icon-for-mode major-mode)))
   ;;   :init
   ;;   (setq ivy-rich-display-transformers-list ; max column width sum = (ivy-poframe-width - 1)
   ;;         '(ivy-switch-buffer
   ;;           (:columns
   ;;            ((ivy-rich-switch-buffer-icon (:width 2))
   ;;             (ivy-rich-candidate (:width 35))
   ;;             (ivy-rich-switch-buffer-project (:width 15 :face success))
   ;;             (ivy-rich-switch-buffer-major-mode (:width 13 :face warning)))
   ;;            :predicate
   ;;            #'(lambda (cand) (get-buffer cand)))
   ;;           counsel-M-x
   ;;           (:columns
   ;;            ((counsel-M-x-transformer (:width 35))
   ;;             (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
   ;;           counsel-describe-function
   ;;           (:columns
   ;;            ((counsel-describe-function-transformer (:width 35))
   ;;             (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
   ;;           counsel-describe-variable
   ;;           (:columns
   ;;            ((counsel-describe-variable-transformer (:width 35))
   ;;             (ivy-rich-counsel-variable-docstring (:width 34 :face font-lock-doc-face))))
   ;;           package-install
   ;;           (:columns
   ;;            ((ivy-rich-candidate (:width 25))
   ;;             (ivy-rich-package-version (:width 12 :face font-lock-comment-face))
   ;;             (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
   ;;             (ivy-rich-package-install-summary (:width 23 :face font-lock-doc-face))))))
   ;;   :config
   ;;   (ivy-rich-mode +1)
   ;;   (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

   ;; (use-package prescient
   ;;   :custom
   ;;   (prescient-filter-method '(literal regexp initialism fuzzy))
   ;;   :config
   ;;   (prescient-persist-mode +1))

   ;; (use-package ivy-prescient
   ;;   :after (prescient ivy)
   ;;   :custom
   ;;   (ivy-prescient-sort-commands '(:not swiper counsel-grep ivy-switch-buffer))
   ;;   (ivy-prescient-retain-classic-highlighting t)
   ;;   :config
   ;;   (ivy-prescient-mode +1))
#+end_src

#+BEGIN_SRC emacs-lisp
  ;; visualize color codes https://jblevins.org/log/rainbow-mode
  (use-package rainbow-mode)
  ;;(use-package solaire-mode)

#+END_SRC

https://www.reddit.com/r/emacs/comments/ezetx0/doomthemes_screenshots_updated_good_time_to_go/

#+begin_src emacs-lisp
(defun ap/load-doom-theme (theme)
  "Disable active themes and load a Doom theme."
  (interactive (list (intern (completing-read "Theme: "
                                              (->> (custom-available-themes)
                                                   (-map #'symbol-name)
                                                   (--select (string-prefix-p "doom-" it)))))))
  (ap/switch-theme theme)

  (set-face-foreground 'org-indent (face-background 'default)))

(defun ap/switch-theme (theme)
  "Disable active themes and load THEME."
  (interactive (list (intern (completing-read "Theme: "
                                              (->> (custom-available-themes)
                                                   (-map #'symbol-name))))))
  (mapc #'disable-theme custom-enabled-themes)
  (load-theme theme 'no-confirm))
#+end_src

Take a screenshot, save it to the buffer location, insert a link.

#+begin_src emacs-lisp
  (defun my-org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (setq filename
          (concat
           (make-temp-name
            (concat (buffer-file-name)
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (call-process "import" nil nil nil filename)
    (insert (concat "[[" "./" (file-name-nondirectory filename) "]]"))
    (org-display-inline-images))
#+end_src

* Org Mode

Formatting found on [[http://howardism.org/Technical/Emacs/orgmode-wordprocessor.html][Howardism]]. Also [[https://diego.codes/][Diego]] has some great stuff for
blogging/making a website using Emacs.

** The org package

Some really good reads on org-mode:

- [[https://bzg.fr/en/some-emacs-org-mode-features-you-may-not-know.html/][Org-Mode features you did not know about]]

#+begin_src emacs-lisp
  (use-package org)

  (setq org-catch-invisible-edits 'show-and-error)
#+end_src

** Habits

#+begin_src emacs-lisp
  (require 'org-habit)

  (add-to-list 'org-modules 'org-habit)
#+end_src

** Editing Org files

#+begin_src emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([-*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (setq org-link-frame-setup
        (quote
         ((vm . vm-visit-folder-other-frame)
          (vm-imap . vm-visit-imap-folder-other-frame)
          (gnus . org-gnus-no-new-news)
          (file . find-file)
          (wl . wl-other-frame))))

#+end_src


** Bibliography

#+begin_src emacs-lisp
  (use-package org-ref)
  (setq org-latex-prefer-user-labels t)
#+end_src

** Agenda and capture templates

#+begin_src emacs-lisp
  ;; Move to PRIVATE?
  (setq org-agenda-files '("~/stack/Notebook"))
  (setq org-log-into-drawer t)
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/stack/Notebook/inbox.org" "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/stack/Notebook/tickler.org" "Tickler")
                                 "* %i%? \n %U")
                                ("e" "email" entry (file+headline "~/stack/Notebook/inbox.org" "Tasks from Email")
                                 "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))

  (setq org-refile-targets '(("~/stack/Notebook/notes.org" :level . 2)
                             ("~/stack/Notebook/tickler.org" :maxlevel . 2)))

  (setq org-agenda-custom-commands
        '(("b" "Build fun things" tags-todo "@bft"
           ((org-agenda-overriding-header "BuildFunThings")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key "\C-cf" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
#+end_src

* Utilities

#+begin_src emacs-lisp
  (defun find-first-non-ascii-char ()
    "Find the first non-ascii character from point onwards."
    (interactive)
    (let (point)
      (save-excursion
        (setq point
              (catch 'non-ascii
                (while (not (eobp))
                  (or (eq (char-charset (following-char))
                          'ascii)
                      (throw 'non-ascii (point)))
                  (forward-char 1)))))
      (if point
          (goto-char point)
          (message "No non-ascii characters."))))
#+end_src

* Personal config

# My personal details are stored in a separate, private,
# repository. This repository holds a single ~org~ file that will be read
# using ~org-babel~.

# You can either add your personal information in this file, indicated
# in the sections with ~PRIVATE~, or use the skeleton private file in [[./skeleton-personal.org][this
# file]]. Be sure to include your version of the skeleton file below.

# #+begin_src emacs-lisp
#   ;; Load my personal information
#   (org-babel-load-file
#    (expand-file-name
#     "personal-emacs-config/personal.org" init-dir))
# #+end_src
